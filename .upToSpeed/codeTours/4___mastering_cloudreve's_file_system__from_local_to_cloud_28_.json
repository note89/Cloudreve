{"title":"4 | Mastering Cloudreve's File System: From Local to Cloud","id":"NbJSsIFwIpFolJzuXsg8z/Unbmw+I9nGfGkVfcfE9HQ=","steps":[{"type":"textOnly","description":"Welcome to the tour of Cloudreve's file management and storage system! In this tour, we'll explore how Cloudreve handles file operations, interacts with different storage providers, and manages file metadata. We'll start by looking at the core filesystem package and then dive into specific implementations for various storage backends.","title":"","id":"401"},{"type":"highlight","description":"Let's begin by examining the FileSystem struct, which is the core component of Cloudreve's filesystem package. This struct encapsulates the user's file system and provides methods for file operations.","file":"pkg/filesystem/filesystem.go","highlight":[{"start":37,"end":61}],"title":"","id":"402"},{"type":"highlight","description":"Now, let's look at how files are uploaded using the FileSystem. The Upload method handles the entire upload process, including pre-upload hooks, file saving, and post-upload processing.","file":"pkg/filesystem/upload.go","highlight":[{"start":31,"end":79}],"title":"","id":"403"},{"type":"textOnly","description":"Cloudreve's ability to support multiple storage backends is a key feature of its architecture. This flexibility is achieved through a common interface called Handler. The Handler interface defines a set of operations that each storage driver must implement, allowing Cloudreve to interact with different storage systems in a uniform way. Let's examine this interface to understand its role in the system.","title":"","id":"422"},{"type":"highlight","description":"Here's the definition of the Handler interface. This interface is crucial as it defines the contract that all storage drivers must fulfill to be compatible with Cloudreve.","file":"pkg/filesystem/driver/handler.go","highlight":[{"start":18,"end":51}],"title":"","id":"423"},{"type":"textOnly","description":"Let's break down some of the key methods in the Handler interface:\n\n1. Put: This method is responsible for uploading files. It takes a context and a FileHeader as parameters, allowing for flexible file uploads across different storage systems.\n\n2. Delete: This method deletes one or more files given their paths. It returns a list of files that couldn't be deleted, if any, along with an error.\n\n3. Get: This method retrieves the content of a file given its path.\n\n4. Thumb: This method is used for generating and retrieving thumbnails for files.\n\n5. Source: This method generates external links or download URLs for files.\n\n6. Token: This method generates upload credentials and signatures, which is particularly useful for cloud storage providers that require authentication for uploads.\n\n7. List: This method lists files and directories at a given path, with an option for recursive listing.\n\nBy implementing these methods, each storage driver can provide its own logic for these operations while adhering to a common interface. This allows Cloudreve to work with different storage systems seamlessly.","title":"","id":"424"},{"type":"textOnly","description":"The Handler interface plays a central role in Cloudreve's architecture:\n\n1. Abstraction: It abstracts away the differences between various storage systems, providing a uniform way to interact with files regardless of where they're stored.\n\n2. Extensibility: New storage backends can be added to Cloudreve by implementing this interface, without needing to change the core file management logic.\n\n3. Dependency Inversion: Higher-level modules in Cloudreve depend on this interface rather than concrete implementations, adhering to the Dependency Inversion Principle.\n\n4. Polymorphism: Cloudreve can work with different storage backends interchangeably, as long as they implement this interface.\n\nThis design allows Cloudreve to be highly flexible and extensible when it comes to supporting different storage solutions, from local file systems to various cloud storage providers.","title":"","id":"425"},{"type":"highlight","description":"Let's compare the local storage driver with the OneDrive cloud storage driver. This comparison will highlight how Cloudreve adapts its interface to different storage backends.\n\nThe local driver is simpler, mainly dealing with the local filesystem:\n- It only needs a reference to the storage Policy.\n- Operations are performed directly on the local filesystem.\n\nThe OneDrive driver is more complex, reflecting the needs of cloud storage:\n- It includes a Policy, a custom Client for OneDrive API interactions, and an HTTPClient for network requests.\n- The NewDriver function initializes the driver with default options, like chunk size for uploads.\n\nDespite these differences, both drivers implement the same Handler interface, allowing Cloudreve to interact with them uniformly. This design showcases how Cloudreve achieves flexibility across various storage solutions.","file":"pkg/filesystem/driver/local/handler.go","highlight":[{"start":27,"end":30}],"title":"","id":"405"},{"type":"highlight","description":"Let's compare the local driver with the OneDrive cloud storage implementation. This comparison will highlight how Cloudreve adapts its storage interface for different backends.\n\nOn the left, we have the local driver (Step 5), and on the right, the OneDrive driver (current step). Notice these key differences:\n\n1. Structure: The OneDrive Driver is more complex, including a Client and HTTPClient.\n2. Initialization: OneDrive requires additional setup (NewClient) and default options.\n3. Network: OneDrive needs HTTP capabilities for cloud communication.\n\nThese differences reflect the distinct requirements of local vs. cloud storage, showcasing Cloudreve's adaptability.","file":"pkg/filesystem/driver/onedrive/handler.go","highlight":[{"start":22,"end":41}],"title":"","id":"406"},{"type":"highlight","description":"Let's examine how Cloudreve handles file and folder deletion. The Delete function in the FileSystem struct is responsible for this complex process. It can handle both files and directories, with options for forced deletion and unlinking.","file":"pkg/filesystem/manage.go","highlight":[{"start":133,"end":135}],"title":"","id":"426"},{"type":"highlight","description":"The deletion process begins by initializing data structures to keep track of deleted files and all files being processed.","file":"pkg/filesystem/manage.go","highlight":[{"start":136,"end":141}],"title":"","id":"427"},{"type":"highlight","description":"Before deletion, Cloudreve lists all the directories and files that need to be deleted. This is done using the ListDeleteDirs and ListDeleteFiles methods.","file":"pkg/filesystem/manage.go","highlight":[{"start":143,"end":157}],"title":"","id":"428"},{"type":"highlight","description":"Cloudreve removes files with soft links from the list of files to be deleted. This is an important step to prevent unintended deletions.","file":"pkg/filesystem/manage.go","highlight":[{"start":159,"end":163}],"title":"","id":"429"},{"type":"highlight","description":"Files are grouped by their storage policy before deletion. This allows Cloudreve to efficiently handle deletions across different storage backends.","file":"pkg/filesystem/manage.go","highlight":[{"start":165,"end":172}],"title":"","id":"430"},{"type":"highlight","description":"After grouping, Cloudreve performs the actual deletion of files. It then compiles the results, keeping track of successfully deleted files and handling forced deletions.","file":"pkg/filesystem/manage.go","highlight":[{"start":174,"end":188}],"title":"","id":"431"},{"type":"highlight","description":"After physical file deletion, Cloudreve performs cleanup operations. This includes deleting file records from the database and removing associated share records.","file":"pkg/filesystem/manage.go","highlight":[{"start":190,"end":203}],"title":"","id":"432"},{"type":"highlight","description":"If all files are successfully deleted, Cloudreve proceeds to delete the directories. Finally, it handles any errors and reports on the success of the operation.","file":"pkg/filesystem/manage.go","highlight":[{"start":205,"end":229}],"title":"","id":"433"},{"type":"highlight","description":"Now, let's look at how Cloudreve handles file downloads. The GetDownloadContent method prepares a file for download, including applying any necessary speed limits.","file":"pkg/filesystem/file.go","highlight":[{"start":139,"end":149}],"title":"","id":"408"},{"type":"highlight","description":"Cloudreve also supports file previews. Let's examine the Preview method to see how it handles different file types and storage backends.","file":"pkg/filesystem/file.go","highlight":[{"start":100,"end":136}],"title":"","id":"409"},{"type":"textOnly","description":"We've now explored the core components of Cloudreve's file management and storage system. We've seen how it abstracts different storage backends, handles file operations like upload, download, and deletion, and provides features like file preview. This modular and extensible design allows Cloudreve to support a wide range of storage options while providing a consistent interface for file operations.","title":"","id":"410"}]}