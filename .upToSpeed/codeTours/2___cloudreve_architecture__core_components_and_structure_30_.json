{"title":"2 | Cloudreve Architecture: Core Components and Structure","id":"OqLHOFptV3zSd7Tn+nSECWzJoTGAnx0OmRD72FIlUkI=","steps":[{"type":"textOnly","description":"Welcome to the Cloudreve codebase exploration tour! Let's start by examining the main directories and their responsibilities:\n\n1. cmd: Contains the main entry point of the application.\n2. models: Defines database models and interactions.\n3. pkg: Houses core packages including filesystem, auth, and cluster management.\n4. routers: Manages API routes and middleware.\n5. service: Implements business logic and request handling.\n\nThese directories work together to create a modular and extensible cloud storage system. The 'pkg' directory is particularly important, as it contains the core functionality that other components build upon.\n\nAs we explore these components, you'll gain a solid understanding of Cloudreve's architecture and its main features. Let's dive in!","title":"","id":"468"},{"type":"highlight","description":"Let's start by examining the main.go file, which serves as the entry point for the Cloudreve application. We'll focus on the initial setup, including database connection and handling special execution modes.","file":"main.go","highlight":[{"start":45,"end":63}],"title":"","id":"477"},{"type":"highlight","description":"Now, let's look at how Cloudreve initializes the router and creates the HTTP server.","file":"main.go","highlight":[{"start":65,"end":76}],"title":"","id":"478"},{"type":"highlight","description":"Finally, we'll examine how Cloudreve configures and starts the server, including support for SSL and Unix sockets.","file":"main.go","highlight":[{"start":78,"end":110}],"title":"","id":"479"},{"type":"highlight","description":"The router.go file is crucial for understanding Cloudreve's API structure. It defines routes for both master and slave modes, reflecting Cloudreve's ability to operate in distributed environments.\n\nKey points to note:\n1. The InitRouter function determines the mode (master or slave) and initializes the appropriate router.\n2. In slave mode, routes are grouped under '/api/v3/slave', indicating their role in the distributed setup.\n3. The router uses middleware for cross-origin requests, authentication, and caching control.\n4. Routes are organized into logical groups like 'upload', 'download', and 'aria2' for offline downloads.\n5. Each route corresponds to a specific controller function, defining the API's behavior.\n\nExplore the different route groups. How do they relate to Cloudreve's core features like file management and user interactions? Consider how this routing structure supports scalability and feature modularity in Cloudreve's architecture.","file":"routers/router.go","highlight":[{"start":18,"end":96}],"title":"","id":"470"},{"type":"highlight","description":"The filesystem package is central to Cloudreve's functionality. The FileSystem struct manages file operations and acts as a bridge between the application logic and various storage backends.\n\nThis struct interacts with other components in several ways:\n1. It uses the User and Policy models to determine access rights and storage settings.\n2. The Handler interface allows plugging in different storage providers.\n3. It's used by API controllers to perform file operations requested by clients.\n\nThe FSPool at the top creates a pool of FileSystem objects for efficient reuse across requests. This design allows Cloudreve to handle multiple storage backends concurrently and scale efficiently in both standalone and distributed modes.","file":"pkg/filesystem/filesystem.go","highlight":[{"start":30,"end":64}],"title":"","id":"471"},{"type":"highlight","description":"The Handler interface in the driver package defines the operations that each storage backend must implement. This allows Cloudreve to support various storage providers like local storage, S3, OneDrive, etc.","file":"pkg/filesystem/driver/handler.go","highlight":[{"start":17,"end":51}],"title":"","id":"472"},{"type":"highlight","description":"Let's look at the User model in the models package. This struct represents a user in the system and includes fields for user information, relationships, and methods for user operations.","file":"models/user.go","highlight":[{"start":27,"end":48}],"title":"","id":"473"},{"type":"highlight","description":"The Policy model defines the storage policies in Cloudreve. Each policy represents a specific storage backend configuration.","file":"models/policy.go","highlight":[{"start":20,"end":41}],"title":"","id":"474"},{"type":"highlight","description":"The cluster package manages communication between master and slave nodes. Let's look at the Controller interface, which defines the methods for node communication.","file":"pkg/cluster/controller.go","highlight":[{"start":22,"end":39}],"title":"","id":"475"},{"type":"textOnly","description":"We've explored the core components of Cloudreve, including its main entry point, routing system, filesystem abstraction, database models, and cluster management. Cloudreve's modular architecture allows it to support multiple storage backends and operate in both standalone and distributed modes. The use of interfaces like the filesystem Handler enables easy extension to support new storage providers. The cluster package facilitates communication in distributed setups, allowing Cloudreve to scale horizontally. This design makes Cloudreve a flexible and powerful cloud storage solution.","title":"","id":"476"}]}