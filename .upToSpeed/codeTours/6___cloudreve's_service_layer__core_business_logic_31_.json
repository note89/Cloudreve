{"title":"6 | Cloudreve's Service Layer: Core Business Logic","id":"MW9E4jz2qqmv/D6Ze07zH4O10NV2LDKq/NEewxrN1ho=","steps":[{"type":"textOnly","description":"Welcome to the tour of Cloudreve's business logic and services! In this tour, we'll explore the service package, which encapsulates the core business logic for various operations in the Cloudreve application. The service package acts as an intermediary layer between the controllers and the models, ensuring that business rules are consistently applied and core functionalities are reliably executed.","title":"","id":"489"},{"type":"revealFiles","files":["service/explorer/file.go"],"description":"Let's examine the structure of the service package, focusing on the `explorer` subpackage. This subpackage contains various service structs like `SingleFileService`, `FileIDService`, and `ArchiveService`. Each struct is designed to handle specific file operations, adhering to the principle of separation of concerns.\n\nFor example, `SingleFileService` deals with operations on individual files, while `ArchiveService` handles file archiving and compression. This modular approach allows for better organization of business logic and easier maintenance.\n\nThese services act as an intermediary layer between controllers and models, ensuring consistent application of business rules. For instance, when a file upload is requested, the controller would call the appropriate method on `SingleFileService`, which would then handle the business logic, including validation, before interacting with the filesystem.\n\nThis structure is crucial in Cloudreve's architecture, providing a clean and organized way to implement complex file operations while keeping the codebase maintainable and scalable.","title":"","id":"490"},{"type":"highlight","description":"Here's an example of a service implementation. The `ItemCompressService` handles the compression of files and folders. Notice how it takes in user input and interacts with the filesystem to perform the operation.","file":"service/explorer/file.go","highlight":[{"start":44,"end":63}],"title":"","id":"491"},{"type":"highlight","description":"The CreateCompressTask method demonstrates how services coordinate complex operations. It interacts with the filesystem to prepare files for compression, creates a new task in the task queue, and returns a serialized response. This method:\n\n1. Uses the filesystem to validate and locate files to be compressed.\n2. Creates a new compression task, likely involving database operations.\n3. Potentially triggers background processes for actual compression.\n4. Handles errors and edge cases throughout the process.\n5. Returns a serialized response, possibly including task ID or status.\n\nThis showcases how services act as orchestrators, coordinating between different system components to execute business logic efficiently.","file":"service/explorer/file.go","highlight":[{"start":65,"end":90}],"title":"","id":"492"},{"type":"revealFiles","files":["service/share/visit.go"],"description":"Let's look at another part of the service package. The `share` subpackage handles operations related to file sharing. Here we can see services like `ShareUserGetService`, `ShareGetService`, and `ArchiveService`.","title":"","id":"493"},{"type":"highlight","description":"The `Get` method of `ShareGetService` demonstrates how Cloudreve handles share retrieval and access control. It showcases important business logic:\n\n1. Share Validation: It checks if the share exists and is valid.\n2. Access Control: For password-protected shares, it verifies if the share has been 'unlocked'.\n3. Password Handling: If a password is provided, it attempts to unlock the share.\n4. View Tracking: It increments the view count for valid, accessible shares.\n\nThis method encapsulates the core business rules for share access, ensuring consistent application across the application.","file":"service/share/visit.go","highlight":[{"start":52,"end":89}],"title":"","id":"494"},{"type":"revealFiles","files":["service/admin/site.go"],"description":"The admin services handle operations related to site administration. Here in the `site.go` file, we can see services like `SettingChangeService` which handle changing site-wide settings.","title":"","id":"495"},{"type":"highlight","description":"The `BatchSettingChangeService.Change()` method demonstrates a robust approach to updating multiple site settings simultaneously. It employs a database transaction to ensure atomicity and uses cache management to maintain consistency:\n\n1. It starts a database transaction, ensuring all updates succeed or fail together.\n2. Each setting update is performed within the transaction.\n3. If any update fails, the transaction is rolled back, and the cache is cleaned to prevent inconsistencies.\n4. Upon successful completion, the transaction is committed, and the cache is updated.\n\nThis approach guarantees data consistency across multiple setting changes and efficiently handles potential errors or conflicts.","file":"service/admin/site.go","highlight":[{"start":36,"end":68}],"title":"","id":"496"},{"type":"revealFiles","files":["service/user/login.go"],"description":"User authentication is a critical part of any application. In the `user` subpackage, we find services related to user operations like login and registration. Let's look at the `UserLoginService`.","title":"","id":"497"},{"type":"highlight","description":"The `Login` method of `UserLoginService` handles user authentication. Let's break down this process step by step. First, it attempts to retrieve the user by their email address.","file":"service/user/login.go","highlight":[{"start":127,"end":131}],"title":"","id":"505"},{"type":"highlight","description":"After retrieving the user, the service verifies the provided password. If the password is incorrect, it returns an error response.","file":"service/user/login.go","highlight":[{"start":133,"end":135}],"title":"","id":"506"},{"type":"highlight","description":"The service then checks the user's status. If the user is banned or not activated, it prevents the login and returns an appropriate error message.","file":"service/user/login.go","highlight":[{"start":136,"end":141}],"title":"","id":"507"},{"type":"highlight","description":"If the user has two-factor authentication enabled, the service sets up a temporary session and returns a special response code to indicate that further authentication is needed.","file":"service/user/login.go","highlight":[{"start":143,"end":149}],"title":"","id":"508"},{"type":"highlight","description":"If all checks pass and two-factor authentication is not required, the service creates a new session for the user and returns a successful login response with the user's information.","file":"service/user/login.go","highlight":[{"start":151,"end":157}],"title":"","id":"509"},{"type":"textOnly","description":"We've explored various parts of the service package, including file operations, sharing, admin functions, and user authentication. The service layer plays a crucial role in Cloudreve by encapsulating business logic, ensuring consistent application of rules, and providing a clean interface for controllers to interact with. This separation of concerns helps maintain a well-structured and maintainable codebase.","title":"","id":"499"}]}