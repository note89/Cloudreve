{"title":"5 | Data Models and Database Architecture in Cloudreve","id":"eM6KiArgroj8whya3caXZLsOjZybQBfFzs6Ta+or/bc=","steps":[{"type":"textOnly","description":"Welcome to this code tour on data models and database integration in the Cloudreve project! In this tour, we'll explore how Cloudreve manages its data structures and interacts with the database. We'll look at key models, database operations, and how they all fit together to form the backbone of the application's data layer.","title":"","id":"446"},{"type":"revealFiles","files":["models/user.go"],"description":"Let's begin by examining the User model, which is a fundamental data structure in Cloudreve. This model represents user accounts and contains fields for various user attributes.","title":"","id":"447"},{"type":"highlight","description":"Here we can see some key methods of the User model. The `GetUserByID` function retrieves a user from the database by their ID, while `SetPassword` and `CheckPassword` handle password hashing and verification.","file":"models/user.go","highlight":[{"start":209,"end":259}],"title":"","id":"448"},{"type":"textOnly","description":"Welcome to our exploration of Cloudreve's data models and database integration! In this tour, we'll dive into the core structures that power Cloudreve's file management system. Let's begin by looking at the File model, which is central to Cloudreve's functionality.","title":"","id":"457"},{"type":"highlight","description":"Here's the definition of the File struct. This structure represents files stored in the Cloudreve system and contains various attributes such as name, size, and associated metadata.","file":"models/file.go","highlight":[{"start":17,"end":37}],"title":"","id":"458"},{"type":"highlight","description":"The Create method is responsible for inserting a new file record into the database. Notice how it uses a transaction to ensure data consistency and updates the user's storage usage.","file":"models/file.go","highlight":[{"start":56,"end":74}],"title":"","id":"459"},{"type":"highlight","description":"Cloudreve uses GORM hooks to handle data serialization. The AfterFind method deserializes metadata after retrieving a file record, while BeforeSave serializes it before saving.","file":"models/file.go","highlight":[{"start":76,"end":97}],"title":"","id":"460"},{"type":"highlight","description":"Here are some key methods for file operations. GetChildFile finds a specific file in a folder, while GetChildFiles retrieves all files in a folder.","file":"models/file.go","highlight":[{"start":99,"end":121}],"title":"","id":"461"},{"type":"highlight","description":"These methods demonstrate how Cloudreve queries the database to retrieve files. Notice the use of GORM's query builder to construct complex queries.","file":"models/file.go","highlight":[{"start":123,"end":168}],"title":"","id":"462"},{"type":"textOnly","description":"We've now explored the File model in detail. This model is crucial for Cloudreve's file management capabilities, handling everything from file metadata to database operations. It demonstrates how Cloudreve uses GORM to interact with the database, ensuring efficient and consistent data management.","title":"","id":"463"},{"type":"highlight","description":"The `Create` method of the File model shows how new file records are inserted into the database. Notice how it also updates the user's storage usage.","file":"models/file.go","highlight":[{"start":57,"end":74}],"title":"","id":"450"},{"type":"revealFiles","files":["models/folder.go"],"description":"The Folder model represents directories in the Cloudreve file system. Let's examine its structure and methods.","title":"","id":"451"},{"type":"highlight","description":"The `GetChildFolder` method retrieves the subfolders of a given folder. This is crucial for navigating the folder structure in Cloudreve.","file":"models/folder.go","highlight":[{"start":70,"end":81}],"title":"","id":"452"},{"type":"revealFiles","files":["models/policy.go"],"description":"The Policy model defines storage strategies in Cloudreve. It includes settings for various storage providers and options.","title":"","id":"453"},{"type":"revealFiles","files":["models/migration.go"],"description":"Let's look at how Cloudreve initializes its database connection and performs migrations.","title":"","id":"454"},{"type":"highlight","description":"The `migration` function is crucial for setting up and maintaining Cloudreve's database schema. Let's break it down:\n\n1. It first checks if migration is needed by comparing the current DB version with the required version.\n\n2. If migration is needed, it clears all cache to ensure a clean slate for the new schema.\n\n3. The function then uses GORM's AutoMigrate to create or update tables for all main data models (User, File, Folder, etc.). This ensures the database structure matches the current model definitions.\n\n4. Next, it calls several functions to create initial data:\n   - `addDefaultPolicy`: Sets up the default storage policy.\n   - `addDefaultGroups`: Creates user groups (Admin, User, Anonymous).\n   - `addDefaultUser`: Adds an initial admin user.\n   - `addDefaultNode`: Establishes the master node for the system.\n   - `addDefaultSettings`: Populates the settings table with initial configurations.\n\n5. Finally, `execUpgradeScripts` runs any necessary database upgrade scripts to handle version-specific changes.\n\nThis comprehensive approach ensures that whether it's a fresh installation or an upgrade, the database is always in the correct state to support the current version of Cloudreve.","file":"models/migration.go","highlight":[{"start":23,"end":65}],"title":"","id":"455"},{"type":"textOnly","description":"Let's examine the relationships between the core models we've explored:\n\n1. User and File: Each File belongs to a User (via the UserID field). This allows Cloudreve to track file ownership and manage user storage quotas.\n\n2. User and Folder: Similar to Files, Folders also belong to Users (via the OwnerID field). This structure enables users to organize their files in a hierarchical manner.\n\n3. File and Folder: Files are contained within Folders (via the FolderID field in the File model). This creates the file system structure within Cloudreve.\n\n4. User and Group: Each User belongs to a Group (via the GroupID field). Groups define permissions and quotas for sets of users.\n\nThese relationships form the backbone of Cloudreve's data structure, allowing for efficient organization and management of user files and permissions.","title":"","id":"464"},{"type":"textOnly","description":"The Policy model plays a crucial role in Cloudreve's flexible storage system:\n\n1. Policy and User: While not directly linked in the models we've seen, Policies are associated with Users through the Group model. Each Group has a list of PolicyIDs (PolicyList field) that determine which storage policies are available to users in that group.\n\n2. Policy and File: Each File is associated with a Policy (via the PolicyID field). This determines how and where the file is stored.\n\n3. Policy Options: The PolicyOption struct within the Policy model allows for detailed configuration of different storage backends, including local storage, S3-compatible services, and others.\n\nBy using the Policy model, Cloudreve can support multiple storage backends and provide flexible storage options for different user groups or file types.","title":"","id":"465"},{"type":"textOnly","description":"Cloudreve's database initialization and migration process ensures that the database schema is always up-to-date:\n\n1. Initial Check: The `needMigration()` function checks if migration is necessary by looking for a specific database version setting.\n\n2. Auto Migration: If migration is needed, Cloudreve uses GORM's AutoMigrate function to create or update tables for all models.\n\n3. Default Data: The migration process creates default entries for essential data like the initial storage policy, user groups, and admin user.\n\n4. Upgrade Scripts: Finally, any version-specific upgrade scripts are executed to handle more complex schema changes or data migrations.\n\nThis process allows Cloudreve to evolve its data structure over time while ensuring smooth upgrades for existing installations.","title":"","id":"466"},{"type":"textOnly","description":"We've now explored the core data models and database integration in Cloudreve. These models - User, File, Folder, Group, and Policy - form the foundation of Cloudreve's data layer. They work together to create a flexible and powerful file hosting system:\n\n- Users can own files and folders, organized in a hierarchical structure.\n- Groups provide a way to manage permissions and quotas for sets of users.\n- Policies allow for flexible storage options, supporting various backends.\n- The database migration system ensures smooth updates and consistent data structure.\n\nBy understanding these models and their relationships, you now have a solid grasp of how Cloudreve manages its data. This knowledge is crucial for comprehending the system's overall architecture and for any future development or customization of Cloudreve.\n\nIn the next tours, we'll explore how these data models are used in the application's business logic and API endpoints.","title":"","id":"467"}]}